workflow:
  rules:
    # Don't run when pushing commits to some topic. Anyhow the
    # pipeline will start if there is a merge-request already. This is
    # to avoid running the pipeline duplicate.
    - if: $CI_COMMIT_BRANCH =~ /^topic\/.*/ && $CI_PIPELINE_SOURCE == "push"
      when: never
    - when: always

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

stages:
  - test
  - build
  - deploy

.check:
  stage: test
  image: python:slim

check-flake8:
  extends: .check
  before_script:
    - pip install flake8
  script:
    - flake8

check-isort:
  extends: .check
  before_script:
    - pip install isort
  script:
    - isort --multi-line VERTICAL_GRID --check --diff .

.check-doc:
  extends: .check
  variables:
    DOC_DIR: docs
    README_FILE: README.txt
  rules:
    # only run if documentation changed
    - changes:
        - ${DOC_DIR}/**/*
        - HISTORY   # gets included
      when: on_success
    - when: never
  cache:
    paths:
      - .cache/pip
  before_script:
    - test -r "${DOC_DIR}/requirements-doc.txt" 
      && pip install -r "${DOC_DIR}/requirements-doc.txt"
    - pip install sphinx-lint rstcheck[sphinx]
  script:
    - python -m sphinx -T -E -W -n -b html ${DOC_DIR} _build/html
    - python -m sphinxlint ${DOC_DIR}
    - rstcheck --recursive ${DOC_DIR}

check-doc-readme:
  extends: .check-doc
  script:
    - python -m sphinxlint ${README_FILE}
    - rstcheck ${README_FILE}
  rules:
    # only run if README changed
    - changes:
        - ${README_FILE}
      when: on_success
    - when: never

test:
  stage: test
  image: python:${PYTHON_VERSION}
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.6", "3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]
  cache:
    paths:
      - .cache/pip
  before_script:
    - python -m pip install tox
  script:
    - tox -vv -- -v --output-file junit.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build:
  stage: build
  image: python:slim
  before_script:
    - pip install build twine
  script:
    - python -m build
    - python -m twine check --strict dist/*
  artifacts:
    paths:
      - dist

deploy-locally:
  stage: deploy
  image: python:slim
  rules:
    - if: $DEPLOY_TO_GITLAB_REGISTRY =~ /^(0|no|)$/i
      when: never
    # deploy only tags
    - if: $CI_COMMIT_TAG == null
      when: never
    - when: on_success
  before_script:
    - python -m pip twine
  script:
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token
      python -m twine upload
      --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
      dist/*

deploy-pypi:
  stage: deploy
  image: python:slim
  rules:
    - if: $DEPLOY_TO_PYPI =~ /^(0|no|)$/i
      when: never
    # deploy only tags
    - if: $CI_COMMIT_TAG == null
      when: never
    - when: on_success
  before_script:
    - python -m pip twine
  script:
    - |
      if [ -z "$PYPI_API_TOKEN" ] ; then
          echo >&2 "Required CI/CD variable PYPI_API_TOKEN not set. Aborting."
          exit 1
      fi
    - TWINE_PASSWORD=$PYPI_API_TOKEN TWINE_USERNAME=__token__
      python -m twine upload $PYPI_UPLOAD_OPTIONS dist/*
